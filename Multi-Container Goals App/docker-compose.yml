version: '3.8'
services:
  # The names you specify under services are the 'container names', and you can use these names inside your code 
  # to establish network connections. Example: ./backend/app.js - line 88
  mongo-db:
    image: 'mongo'
    volumes:
      - goals-app-data:/data/db
    # environment:
    # # - MONGO_INITDB_ROOT_USERNAME=admin
    #   MONGO_INITDB_ROOT_USERNAME: admin
    #   MONGO_INITDB_ROOT_PASSWORD: admin  
    env_file: 
      - ./env/mongo.env
    # You can add services to a custom network if you want. But by default, when you use Docker Compose,
    # Docker will automatically create a new environment for all the services specified in this compose file,
    # and it will add all the services to that network out of the box. So all these services which are defined in one
    # and the same compose file will already be part of one and the same network that was created for them by Docker. 
    # networks:
    #   - goals-net    
  backend:
    # With this form, Docker will automatically look for 'Dockerfile' in the path provided
    build: ./backend
    # With this form, you can actually especify which Dockerfile to use to build the image. Could be useful if 
    # you have multiple Dockerfiles. Example: Dockerfile, Dockerfile-dev, etc.
    # Note on 'context': it can be the path to your Dockerfile, like this example here, but it will also be the place
    # where the Dockerfile is built thereafter, so where the image will be generated. That means that your context should be set
    # to a folder, which includes everything the Dockerfile might be referring to.
    # build:
    #   context: ./backend
    #   dockerfile: DOckerfile-dev
    #   args:
    #     some-arg: arg1
    ports:
      - '80:80'
    volumes:
      - logs:/app/logs  
      # For bind mounts, when using docker-compose, we are allowed to use a relative path relative from the docker-compose.yml file.
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./env/backend.env
    depends_on:
      - mongo-db  
  frontend:
    build: ./frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend/src:/app/src
    # Remember that the React container needs to be run in interactive mode. How do we do it here?
    # We need 'stdin_open' and 'tty' options set to TRUE. After all, this is what the -it flag does.
    stdin_open: true
    tty: true  
    depends_on:
      - backend  
# For named volumes, you also need to add a volumes' at the top level. Anonymous volumes and bind mounts don't need this.
volumes:
  goals-app-data:   
  logs: