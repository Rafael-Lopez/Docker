version: '3.8'

services:
  server:
    build:
      # 'context' does more than just set the folder in which this Dockerfile can be found. It also sets the folder
      # in which the Dockerfile will be built. That means that, the 'src' and 'nginx' folders will be unreachable (we
      # are copying these two folders into the image - look at the DOckerfile), because they are not in the 'dockerfiles' 
      # folder, but one level above. Therefore, instead of using:
      # context: ./dockerfiles
      # dockerfile: nginx.dockerfile
      # we do:
      # context: .
      # dockerfile: .dockerfiles/nginx.dockerfile 
      context: .
      dockerfile: ./dockerfiles/nginx.dockerfile
    ports:
      - '8000:80'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # We are picking this folder because in the nginx config (line 5), it's the var www html folder from which 
      # we're serving our content and where we are looking for files. Of course we're looking in the 'public' folder,
      # but that is a folder which exists in the source folder. So binding 'src' to '/var/www/html' is what we need 
      # to do to ensure that our content is made available through that server.
      - ./src:/var/www/html
    depends_on:
      - php
      - mysql  
  php:
    build: 
      context: .
      dockerfile: ./dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/html:delegated
      # ports:
      # The port we need to expose is specified in nginx/nginx.conf (line 12)
      # Notice also that, in that same line (php:3000 - or php:9000 after the update), we use 'php' because that's the name of this service. But
      #  we could've used an IP address too. We are simply taking advantage of the fact that all these containers are 
      # running in the same network by default, so Docker is able to translate the service names.
        # - '9000:3000' 
      # All that being said, we don't need 'ports' here, because all we need is container-to-container communication,
      # so exposing the port to the host is not needed.
  mysql:
    image: mysql:5.7
    env_file:
      - ./env/mysql.env
  composer:
    build: 
      context: .
      dockerfile: ./dockerfiles/composer.dockerfile
    volumes:
      - ./src:/var/www/html  
  artisan:
    build: 
      context: .
      dockerfile: ./dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html  
    # This allows us to override or add an ENTRYPOINT if it doesn't exist yet in a Dockerfile. 
    entrypoint: ["php", "/var/www/html/artisan"]
  npm:   
    # We could write a Dockerfile for npm, but this is just to show that we can set all that here as well.
    image: node:14
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes:
      - ./src:/var/www/html  